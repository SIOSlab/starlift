% -------------- READ ME -------------- 
% THIS FILE REQUIRES THAT A WORKSPACE GENERATED BY OPTga_Elliot_MOO IS
% LOADED TO RUN
% THIS WORKSPACE DATA CAN BE LOADED FROM SAVED FILES IN THE MOO_OPT_DATA
% FOLDER
% -------------- READ ME -------------- 
tic
Favg = abs(Favg);

maxFitnessesLam = zeros(length(lambdaList),1);
maxFitnessesLamInd = maxFitnessesLam;

for k = 1:length(lambdaList)
    [maxFit,maxInd] = max(F(:,NG,k));
    maxFitnessesLam(k) = maxFit;
    maxFitnessesLamInd(k) = maxInd;
end
maxFitnessesLam = abs(maxFitnessesLam);

bestCosts = zeros(1,length(lambdaList));
bestTimes = zeros(1,length(lambdaList));
bestMasses = zeros(1,length(lambdaList));
bestThrusters = zeros(1,length(lambdaList));
bestPropellants = zeros(1, length(lambdaList));
bestDesignVecs = zeros(6,length(lambdaList));
for k = 1:length(lambdaList)
    bestVars =Xp(maxFitnessesLamInd(k),:,NG,k);
    [~,bestCost,bestTime,bestMass,bestThruster,bestPropellants,bestDesignVec] = MDOrun_MOO(bestVars(1),bestVars(2),bestVars(3),bestVars(4),bestVars(5),bestVars(6),lambdaList(k));
    bestCosts(k)=bestCost/1e6;
    bestTimes(k)=bestTime/3600/24/365;
    bestMasses(k)=bestMass;
    bestThrusters(k) = bestThruster;
    bestDesignVecs(:,k)=bestDesignVec;
end
    bestPropellants = bestVarsArray(:,3);


% find a point using exact time
[~,indDesired] = min(abs(bestTimes-3.85755))
desiredDesignVec =bestDesignVecs(:,indDesired)
[~,costDesired,timeDesired,massDesired,thrustertypeDesired,propellanttypeDesired, designvecDesired]...
    = MDOrun_MOO(desiredDesignVec(1),desiredDesignVec(2),desiredDesignVec(3),...
    desiredDesignVec(4),desiredDesignVec(5),desiredDesignVec(6), lambdaList(indDesired));
lessThan10YrCount = 0;
nonDominatedCount = 1;
for m = 1:length(lambdaList)
    dominatedFlag = 0;
    currCost = bestCosts(m);
    currTime = bestTimes(m);
    if currTime < 10
        lessThan10YrCount = lessThan10YrCount+1;
    end
    for n = 1:length(lambdaList)
        if n ~= m
            otherCost = bestCosts(n);
            otherTimes = bestTimes(n);
            if otherTimes < currTime && otherCost < currCost
                dominatedFlag = 1;
                break
            end
        end
    end
    if dominatedFlag == 0
        nonDominatedIndices(nonDominatedCount)=m;
        nonDominatedCount = nonDominatedCount+1;
    end
end
% 
% [paretoCosts,I] = sort(bestCosts(nonDominatedIndices));
% paretoTimes = bestTimes(nonDominatedIndices);
% paretoTimes = paretoTimes(I);
% paretoBestDesignVecs = bestDesignVecs(:,nonDominatedIndices);
%paretoBestDesignVecs = paretoBestDesignVecs(I);

[paretoCosts, I] = sort(bestCosts(nonDominatedIndices));
paretoTimes = bestTimes(nonDominatedIndices);
paretoTimes = paretoTimes(I);
paretoBestDesignVecs = bestDesignVecs(:, nonDominatedIndices);
paretoBestDesignVecs = paretoBestDesignVecs(:, I);

%%utopia

% Utopia point
utopiaCost = min(paretoCosts); % Replace with the desired utopia cost
utopiaTime = min(paretoTimes); % Replace with the desired utopia time

% Calculate Euclidean distances
distances = sqrt((paretoCosts - utopiaCost).^2 + (paretoTimes - utopiaTime).^2);

% Find the index of the point with the smallest distance
[closestDistance, closestIndex] = min(distances);

% Retrieve the corresponding values
closestDesignVec = paretoBestDesignVecs(:, closestIndex);
closestCost = paretoCosts(closestIndex);
closestTime = paretoTimes(closestIndex);

% constraints
CostUB = 650e3; % [$ million]
TimeUB = 15e3; % [years]
MassUB = 11e3; % [kg] Falcon Heavy to SSO;


b = [3/255,143/255,245/255];
g = [0.4660 0.6740 0.1880];
r = [0.6350 0.0780 0.1840];

figure(1);

subplot(1, 2, 1);
hold on
grid on

%figureWidth = 1000;  % Adjust as needed
%figureHeight = 800;  % Adjust as needed
% Set the figure position and size
%set(gcf, 'Position', [100, 100, figureWidth, figureHeight]);

validDesigns = bestCosts < 2e3 & bestTimes < 15;

filteredbestCosts = bestCosts(validDesigns);
filteredbestTimes = bestTimes(validDesigns);
filteredbestVarsArray = bestVarsArray(validDesigns, :);



for i = 1:length(filteredbestVarsArray)
    if filteredbestVarsArray(i, 1) == 1 
        if filteredbestVarsArray(i,3) == 1
            plot(filteredbestCosts(i), filteredbestTimes(i), 'o','Color', b, 'MarkerSize', 6, 'LineWidth', 2)
        elseif filteredbestVarsArray(i,3) == 2
            plot(filteredbestCosts(i), filteredbestTimes(i), 'o','Color', g, 'MarkerSize', 6, 'LineWidth', 6)
        elseif filteredbestVarsArray(i,3) == 3
            plot(filteredbestCosts(i), filteredbestTimes(i), 'o','Color', r,'MarkerSize', 6, 'LineWidth', 2)
        end
    else
        if filteredbestVarsArray(i,3) == 1w
            plot(filteredbestCosts(i), filteredbestTimes(i), 'v','Color', b, 'MarkerSize', 6, 'LineWidth', 2)
        elseif filteredbestVarsArray(i,3) == 2
            plot(filteredbestCosts(i), filteredbestTimes(i), 'v','Color', g, 'MarkerSize', 6, 'LineWidth', 4)
        elseif filteredbestVarsArray(i,3) == 3
            plot(filteredbestCosts(i), filteredbestTimes(i), 'v','Color', r, 'MarkerSize', 6, 'LineWidth', 2)
        end
    end
end
% 
% for i = 1:length(lambdaList)
%     if bestCosts(i) < CostUB && bestTimes(i) < TimeUB && bestMasses(i) < MassUB
%         if bestThrusters(i) == 1 && bestPropellants(i) 
%             plot(bestCosts(i),bestTimes(i),'ob','LineWidth',1,'DisplayName','Hall Thruster')
%         else
%             plot(bestCosts(i),bestTimes(i),'og','LineWidth',1,'DisplayName','Ion Thruster')
%         end
% 
%     else
%         plot(bestCosts(i),bestTimes(i),'or','LineWidth',1,'DisplayName','Infeasible')
%     end
% end
grey = [.9, .9, .9];
plot(paretoCosts,paretoTimes,'-k', 'LineWidth',4)
ax = gca; % Get the current axes
set(gcf, 'color', 'w')
ax.FontSize = 22; % 14 is the desired font size for tick labels
xlabel('\textbf{Life Cycle Cost (\$USD million)}', 'FontSize', 22)
ylabel('\textbf{Time (years)}', 'FontSize',22)
title(ax, '\textbf{Multiobjective Space}', 'FontSize', 26, 'Interpreter', 'latex')

yline(min(bestTimes),'k-.', 'LineWidth', 1.2)
xline(min(bestCosts),'k-.', 'LineWidth', 1.2)
plot(min(bestCosts),min(bestTimes),'ok',LineWidth=20)
text(min(bestCosts),min(bestTimes),'Utopia',...
    'VerticalAlignment','bottom','HorizontalAlignment','left', 'FontSize',20 )
grid on
%legend('Hall Thruster','Ion Thruster','Infeasible',Location='SE')

%% subplot2
subplot(1, 2, 2); 
hold on
grid on

hold on
%figureWidth = 1000;  % Adjust as needed
%figureHeight = 800;  % Adjust as needed
% Set the figure position and size
%set(gcf, 'Position', [100, 100, figureWidth, figureHeight]);

% Set the desired limits
costLimit = 800;  % in million dollars
timeLimit = 10;   % in years

zoomvalidDesigns = bestCosts < costLimit & bestTimes < timeLimit;

zoombestCosts = bestCosts(zoomvalidDesigns);
zoombestTimes = bestTimes(zoomvalidDesigns);
zoombestVarsArray = bestVarsArray(zoomvalidDesigns, :);

% Create the zoomed variables
paretoZoomedCosts = min(paretoCosts, costLimit);
paretoZoomedTimes = min(paretoTimes, timeLimit);


for i = 1:length(zoombestVarsArray)
    if zoombestVarsArray(i, 1) == 1 
        if zoombestVarsArray(i,3) == 1
            plot(zoombestCosts(i), zoombestTimes(i), 'o','Color', b, 'MarkerSize', 6, 'LineWidth', 2)
        elseif zoombestVarsArray(i,3) == 2
            plot(zoombestCosts(i), zoombestTimes(i), 'o','Color', g, 'MarkerSize', 6, 'LineWidth', 4)
        elseif zoombestVarsArray(i,3) == 3
            plot(zoombestCosts(i), zoombestTimes(i), 'o','Color', r,'MarkerSize', 6, 'LineWidth', 2)
        end
    else
        if zoombestVarsArray(i,3) == 1w
            plot(zoombestCosts(i), zoombestTimes(i), 'v','Color', b, 'MarkerSize', 6, 'LineWidth', 2)
        elseif zoombestVarsArray(i,3) == 2
            plot(zoombestCosts(i), zoombestTimes(i), 'v','Color', g, 'MarkerSize', 6, 'LineWidth', 4)
        elseif zoombestVarsArray(i,3) == 3
            plot(zoombestCosts(i), zoombestTimes(i), 'v','Color', r, 'MarkerSize', 6, 'LineWidth', 2)
        end
    end
end

grey = [.9, .9, .9];
plot(paretoZoomedCosts,paretoZoomedTimes,'-k', 'LineWidth',2)
ax = gca; % Get the current axes
set(gcf, 'color', 'w')
ax.FontSize = 22; % 14 is the desired font size for tick labels
xlabel('\textbf{Life Cycle Cost (\$USD million)}', 'FontSize', 22)
ylabel('\textbf{Time (years)}', 'FontSize',22)
title(ax, '\textbf{Focused Multiobjective Space}', 'FontSize', 26, 'Interpreter', 'latex')

% 
yline(min(bestTimes),'k-.', 'LineWidth', 1.2)
xline(min(bestCosts),'k-.', 'LineWidth', 1.2)
plot(min(bestCosts),min(bestTimes),'ok',LineWidth=20)
text(min(bestCosts),min(bestTimes),'Utopia',...
    'VerticalAlignment','bottom','HorizontalAlignment','left', 'FontSize',20 )
grid on


%% figure 2
figure(2)

hold on
% figureWidth = 1000;  % Adjust as needed
% figureHeight = 800;  % Adjust as needed
% % Set the figure position and size
% set(gcf, 'Position', [100, 100, figureWidth, figureHeight]);


ax = gca; % Get the current axes
set(gcf, 'color', 'w')
ax.FontSize = 22; % 14 is the desired font size for tick labels
xlabel('\textbf{Life Cycle Cost (\$USD million)}', 'FontSize', 22)
ylabel('\textbf{Time (years)}', 'FontSize',22)
title(ax, '\textbf{Pareto Front}', 'FontSize', 26, 'Interpreter', 'latex')
grid on


% Add a legend
%legend('Pareto Front');

% Color the points based on the type of elements in the design vector
for i = 1:length(nonDominatedIndices)
    idx = nonDominatedIndices(i);
    designVec = bestDesignVecs(:, idx);
    
    % Extract design vector elements
    thruster = designVec(1);
    propellant = designVec(3);
    
    % Specify colors based on the type of elements
    if thruster == 1 
        if propellant == 1
            color = b; % Blue
            marker = 'o'; % Circle for thruster type 1
        elseif propellant == 2
            color = g; % Green
            marker = '*'; % Circle for thruster type 1
        elseif propellant == 3
            color = r; % Red
        end
        
    else
        if propellant == 1
            color = b;
        elseif propellant == 2
            color = g; 
        elseif propellant == 3
            color = r; 
        end
        marker = 'v'; % Triangle for thruster type 2
    end
    
    % Plot the point with the specified edge color
    hold on;
    scatter(paretoCosts(i), paretoTimes(i), 'MarkerEdgeColor', color, 'Marker', marker, 'LineWidth', 1.5);
end
yline(min(bestTimes),'k-.', 'LineWidth', 1.2)
xline(min(bestCosts),'k-.', 'LineWidth', 1.2)
plot(min(bestCosts),min(bestTimes),'ok',LineWidth=20)
text(min(bestCosts),min(bestTimes),'Utopia',...
    'VerticalAlignment','bottom','HorizontalAlignment','left', 'FontSize',20 )

hold off;




% figure(3)
% set(gcf, 'color','w')
% box on
% grid on
% xlim([250,700])
% ylim([0,8])
% yline(min(bestTimes),'k-.')
% xline(min(bestCosts),'k-.')
% plot(min(bestCosts),min(bestTimes),'.k',LineWidth=8)
% text(min(bestCosts),min(bestTimes),'Utopia Point',...
%     'VerticalAlignment','bottom','HorizontalAlignment','right')
% saveas(f2,'ParetoFront.png')
% xlim([360,380])
% ylim([3.7,4])
% saveas(f2,'ParetoFrontZoomed.png')
 toc
